# @package _global_

# example hyperparameter optimization of some experiment with Optuna:
# python train.py -m hparams_search=optuna experiment=example

defaults:
  - override /hydra/sweeper: optuna
  - override /hydra/launcher: joblib
  - override /logger: csv
  - override /trainer: gpu

extras:
  print_config: False

callbacks:
  model_summary: null
  progress_bar:
    _target_: llm.utils.progress_bar.LoguruProgressBar

trainer:
  max_epochs: 5
  limit_train_batches: 0.01
  limit_val_batches: 0.01
  limit_test_batches: 0.01

optimized_metric: "val/acc_best"
seed: 66
task_name: "hparams_search"

# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  mode: "MULTIRUN" # set hydra to multirun by default if this config is attached

  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # number of parallel workers
    n_jobs: 2

    # 'minimize' or 'maximize' the objective
    direction: maximize

    # total number of runs that will be executed
    n_trials: 10

    # choose Optuna hyperparameter sampler
    # you can choose bayesian sampler (tpe), random search (without optimization), grid sampler, and others
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: 66
      n_startup_trials: 4 # number of random sampling runs before optimization starts

    # define hyperparameter search space
    params:
      model.optimizer.lr: interval(0.0001, 0.1)
      data.batch_size: choice(32, 64, 128, 256)
      model.net.lin1_size: choice(64, 128, 256)
      model.net.lin2_size: choice(64, 128, 256)
      model.net.lin3_size: choice(32, 64, 128, 256)
